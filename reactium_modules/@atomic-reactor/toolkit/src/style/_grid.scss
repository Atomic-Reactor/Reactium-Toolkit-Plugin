// Grid
$grid-columns: 12 !default; // Set number of columns in the grid

// smallest to largest
$breakpoints-max: (
'xs': 640,
'sm': 990,
'md': 1280,
'lg': 1440,
'xl': 1920,
) !default;

$xs-max: '#{map-get($breakpoints-max, 'xs')}px' !default; // Set xs breakpoint's max width
$sm-max: '#{map-get($breakpoints-max, 'sm')}px' !default; // Set sm breakpoint's max width
$md-max: '#{map-get($breakpoints-max, 'md')}px' !default; // Set md breakpoint's max width
$lg-max: '#{map-get($breakpoints-max, 'xl')}px' !default; // Set lg breakpoint's max width

$gutter: 0 !default;

$sm-start: '#{map-get($breakpoints-max, 'xs') + 1}px' !default; // Set sm breakpoint's min width
$md-start: '#{map-get($breakpoints-max, 'sm') + 1}px' !default; // Set md breakpoint's min width
$lg-start: '#{map-get($breakpoints-max, 'md') + 1}px' !default; // Set lg breakpoint's min width
$xl-start: '#{map-get($breakpoints-max, 'xl') + 1}px' !default; // Set xl breakpoint's min width

$content-well-max-width: 'none' !default; // Set the max-width of the content well

// Breakpoints
// Create breakpoint range statements to be used in media queries
$breakpoint-xs-up: 'only screen' !default;
$breakpoint-xs-only: 'only screen and (max-width: #{$xs-max})' !default; // 0 -> xs-max range
$breakpoint-sm-up: 'only screen and (min-width: #{$sm-start})' !default; // sm-start -> up range
$breakpoint-sm-only: 'only screen and (min-width: #{$sm-start}) and (max-width: #{$sm-max})' !default; // sm-start -> sm-max range
$breakpoint-md-up: 'only screen and (min-width: #{$md-start})' !default; // md-start -> up range
$breakpoint-md-only: 'only screen and (min-width: #{$md-start}) and (max-width: #{$md-max})' !default; // md-start -> md-max range
$breakpoint-lg-up: 'only screen and (min-width: #{$lg-start})' !default; // lg-start -> up range
$breakpoint-lg-only: 'only screen and (min-width: #{$lg-start}) and (max-width: #{$lg-max})' !default; // lg-start -> lg-max range
$breakpoint-xl-up: 'only screen and (min-width: #{$xl-start})' !default; // xl-start -> up range

$breakpoint-sm-down: 'only screen and (max-width: #{$sm-max})' !default; // sm -> down
$breakpoint-md-down: 'only screen and (max-width: #{$md-max})' !default; // md -> down
$breakpoint-lg-down: 'only screen and (max-width: #{$lg-max})' !default; // lg -> down

$breakpoints-all: (
$breakpoint-xs-only,
$breakpoint-sm-up,
$breakpoint-sm-only,
$breakpoint-md-up,
$breakpoint-md-only,
$breakpoint-lg-up,
$breakpoint-lg-only,
$breakpoint-xl-up
) !default;
$breakpoint-ups: (
$breakpoint-sm-up,
$breakpoint-md-up,
$breakpoint-lg-up,
$breakpoint-xl-up
) !default;
$breakpoint-all-prefixes: (
'xs',
'xs-only',
'sm',
'sm-only',
'md',
'md-only',
'lg',
'lg-only',
'xl'
) !default;
$breakpoint-up-prefixes: ('xs', 'sm', 'md', 'lg', 'xl') !default;

$breakpoints: (
'xs': $breakpoint-xs-up,
'xs-only': $breakpoint-xs-only,
'sm': $breakpoint-sm-up,
'sm-only': $breakpoint-sm-only,
'sm-down': $breakpoint-sm-down,
'md': $breakpoint-md-up,
'md-only': $breakpoint-md-only,
'md-down': $breakpoint-md-down,
'lg': $breakpoint-lg-up,
'lg-only': $breakpoint-lg-only,
'lg-down': $breakpoint-lg-down,
'xl': $breakpoint-xl-up,
) !default;

@mixin breakpoint($thisPrefix) {
    $break: map-get($breakpoints, $thisPrefix);

    @if ($break != null) {
        @media #{$break} {
            @content;
        }
    }
}

@mixin flex-factory() {
    display: flex;

    .grow,
    &-grow {
        flex-grow: 1;
    }

    .shrink,
    &-shrink {
        flex-shrink: 1;
    }

    &-left,
    &.left {
        display: flex;
        justify-content: flex-start;
    }

    &-right,
    &.right {
        display: flex;
        justify-content: flex-end;
    }

    &-center,
    &.center {
        display: flex;
        justify-content: center;
    }

    &-top,
    &.top {
        display: flex;
        align-items: flex-start;
    }

    &-bottom,
    &.bottom {
        display: flex;
        align-items: flex-end;
    }

    &-middle,
    &.middle {
        display: flex;
        align-items: center;
    }

    &-row,
    &.rtk-row {
        display: flex;
        flex-direction: row;
    }

    &-column,
    &.rtk-column {
        display: flex;
        flex-direction: column;
    }
}

@mixin row($full-width: 'false') {
    margin: 0 auto;
    width: 100%;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    // // Overrides flexbox's default behavior of making all children equal height
    // align-items: flex-start; // If this was not in place it would require two classes to make a row full of unequal height columns aligned top, middle, bottom
    @if type-of($content-well-max-width) ==
        number and
        $content-well-max-width !=
        0 and
        $full-width ==
        'false'
    {
        max-width: $content-well-max-width;
    }
}

@mixin row-reverse() {
    flex-direction: row-reverse;
}

@mixin row-eq-height() {
    align-items: stretch;
}

// For use when row align-item flex-start has been overridden
@mixin row-auto-height() {
    align-items: flex-start;
}

@mixin col-reverse() {
    flex-direction: column-reverse;
}

// Condition to run inside of the col mixin * not for developer use *
@mixin col-condition($col-number) {
    @if type-of($col-number) == number {
        @if $col-number > $grid-columns or $col-number == 0 {
            @warn "Column number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
        } @else {
            flex-basis: 100% / $grid-columns * $col-number;
            max-width: 100% / $grid-columns * $col-number;
            padding: $gutter;
        }
        // If no col number is passed then arg is set to "auto" by default
        // "auto" mode fills the horizontal space with evenly sized containers
    } @else if $col-number == 'auto' {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
        padding: $gutter;
    } @else {
        @warn "Column number argument must either be the string 'auto' or a number greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
    }
} // Condition to run inside of the col mixin * not for developer use *

@mixin col($breakpoint: 'xs', $col-number: 'auto') {
    // If no breakpoint is passed and a col number is just use the first arg as the col number and act like xs
    @if type-of($breakpoint) == number {
        $col-number: $breakpoint;
        @include col-condition($col-number);
    } @else if $breakpoint == 'xs' {
        @include col-condition($col-number);
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            @include col-condition($col-number);
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            @include col-condition($col-number);
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            @include col-condition($col-number);
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            @include col-condition($col-number);
        }
    } @else {
        @warn "col mixin requires one of the existing breakpoint prefixes (#{$breakpoint-up-prefixes})";
    }
}

// Condition to run inside of the col-offset mixin * not for developer use *
@mixin col-offset-condition($offset-number) {
    @if type-of($offset-number) != number {
        @warn "Column offset number must be a number (only arg or second arg in the col mixin)";
    } @else if $offset-number == 0 {
        @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
    } @else if $offset-number > $grid-columns {
        @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
    } @else {
        margin-left: 100% / $grid-columns * $offset-number;
    }
} // Condition to run inside of the col-offset mixin * not for developer use *

@mixin col-offset($breakpoint: 'xs', $offset-number: 0) {
    // If no breakpoint is passed and a col number is just use the first arg as the col number and act like xs
    @if type-of($breakpoint) == number {
        $offset-number: $breakpoint;
        @include col-offset-condition($offset-number);
    } @else if $breakpoint == 'xs' {
        @include col-offset-condition($offset-number);
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            @include col-offset-condition($offset-number);
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            @include col-offset-condition($offset-number);
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            @include col-offset-condition($offset-number);
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            @include col-offset-condition($offset-number);
        }
    } @else {
        @warn "col mixin requires one of the existing breakpoint prefixes (#{$breakpoint-up-prefixes})";
    }
}

@mixin start($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        justify-content: flex-start;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            justify-content: flex-start;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            justify-content: flex-start;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            justify-content: flex-start;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            justify-content: flex-start;
        }
    } @else {
        @warn "start mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin center($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        justify-content: center;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            justify-content: center;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            justify-content: center;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            justify-content: center;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            justify-content: center;
        }
    } @else {
        @warn "center mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin end($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        justify-content: flex-end;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            justify-content: flex-end;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            justify-content: flex-end;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            justify-content: flex-end;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            justify-content: flex-end;
        }
    } @else {
        @warn "end mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin top($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        align-items: flex-start;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            align-items: flex-start;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            align-items: flex-start;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            align-items: flex-start;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            align-items: flex-start;
        }
    } @else {
        @warn "top mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin middle($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        align-items: center;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            align-items: center;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            align-items: center;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            align-items: center;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            align-items: center;
        }
    } @else {
        @warn "middle mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin bottom($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        align-items: flex-end;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            align-items: flex-end;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            align-items: flex-end;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            align-items: flex-end;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            align-items: flex-end;
        }
    } @else {
        @warn "bottom mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin around($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        justify-content: space-around;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            justify-content: space-around;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            justify-content: space-around;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            justify-content: space-around;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            justify-content: space-around;
        }
    } @else {
        @warn "around mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin between($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        justify-content: space-between;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            justify-content: space-between;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            justify-content: space-between;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            justify-content: space-between;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            justify-content: space-between;
        }
    } @else {
        @warn "between mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin first($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        order: -1;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            order: -1;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            order: -1;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            order: -1;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            order: -1;
        }
    } @else {
        @warn "first mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

@mixin last($breakpoint: 'xs') {
    @if $breakpoint == 'xs' {
        order: 1;
    } @else if $breakpoint == 'sm' {
        @media #{$breakpoint-sm-up} {
            order: 1;
        }
    } @else if $breakpoint == 'md' {
        @media #{$breakpoint-md-up} {
            order: 1;
        }
    } @else if $breakpoint == 'lg' {
        @media #{$breakpoint-lg-up} {
            order: 1;
        }
    } @else if $breakpoint == 'xl' {
        @media #{$breakpoint-xl-up} {
            order: 1;
        }
    } @else {
        @warn "last mixin arg must be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
}

.rtk-row {
    @include row();
}

.rtk-row.reverse {
    @include row-reverse();
}

.rtk-row.eq-height {
    @include row-eq-height();
}

.rtk-row.auto-height {
    @include row-auto-height();
}

.rtk-row.flex-column {
    flex-direction: column;
}

.rtk-col {
    @include col();
}

.rtk-col.reverse {
    @include col-reverse();
}

@each $prefix in $breakpoint-all-prefixes {
    @include breakpoint($prefix) {
        .rtk-col.reverse-#{$prefix} {
            @include col-reverse();
        }
        .rtk-row.reverse-#{$prefix} {
            @include row-reverse();
        }
    }
}

.first {
    order: -1;
}

.last {
    order: 1;
}

.align-start {
    align-self: flex-start;
}

.align-end {
    align-self: flex-end;
}

.align-center {
    align-self: center;
}

.align-baseline {
    align-self: baseline;
}

.align-stretch {
    align-self: stretch;
}
// Mixin to run inside of for loop - creates col/breakpoint classes * Not for developer use *
@mixin col-factory($thisPrefix) {
    .rtk-col-#{$thisPrefix} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
        padding: $gutter;
    }
    @for $i from 1 through $grid-columns {
        .rtk-col-#{$thisPrefix}-#{$i} {
            flex-basis: 100% / $grid-columns * $i;
            max-width: 100% / $grid-columns * $i;
            padding: $gutter;
        }

        .rtk-col-#{$thisPrefix}-offset-#{$i} {
            margin-left: 100% / $grid-columns * $i;
        }
    }

    .start-#{$thisPrefix} {
        justify-content: flex-start;
    }

    .center-#{$thisPrefix} {
        justify-content: center;
    }

    .end-#{$thisPrefix} {
        justify-content: flex-end;
    }

    .top-#{$thisPrefix} {
        align-items: flex-start;
    }

    .middle-#{$thisPrefix} {
        align-items: center;
    }

    .bottom-#{$thisPrefix} {
        align-items: flex-end;
    }

    .around-#{$thisPrefix} {
        justify-content: space-around;
    }

    .between-#{$thisPrefix} {
        justify-content: space-between;
    }

    .first-#{$thisPrefix} {
        order: -1;
    }

    .last-#{$thisPrefix} {
        order: 1;
    }
}
// Mixin to run inside of for loop - creates col/breakpoint classes
@each $prefix in $breakpoint-up-prefixes {
    @include breakpoint($prefix) {
        @include col-factory($prefix);
    }
}

.rtk-col-gutter-lr {
    padding: 0 $gutter;
}

.rtk-col-no-gutter {
    padding: 0;
}
